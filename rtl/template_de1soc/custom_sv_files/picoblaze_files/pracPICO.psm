                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;10 simple LEDs. Is an OUTPUT port.
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
                    ;CONSTANT SSEG_PORT0, 30
					CONSTANT SSEG_PORT1, 20
					CONSTANT SSEG_PORT2, 10

                    CONSTANT BLINKING_LED_port, 40      ;blinking LED at LEDR[0]
                
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
                    CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
                    ;
                    ; 16-bit accumulator
                    CONSTANT ACCUMULATOR_LSB, 05        ;lower 8-bits of accumulator
                    CONSTANT ACCUMULATOR_MSB, 06        ;upper 8-bits of accumulator
                    ;
                    CONSTANT COUNTER, 07                ;counter used to average every 256 samples
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 0B
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;initialize constants to 0 and clear LEDs
                    STORE s0, LED_pattern
                    STORE s0, ACCUMULATOR_LSB
                    STORE s0, ACCUMULATOR_MSB
                    STORE s0, COUNTER
                    OUTPUT s0, LED_port
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
              
            	
					

					;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
					
      main_program: CALL delay_1s;
       
       toggle_led0: FETCH s7, LED_pattern               ;read current counter value
                    AND s7, 01                          ;remove all bits except lsb
                    XOR s7, 01                          ;invert lsb			   
                    STORE s7, LED_pattern               ;store new counter value
                    OUTPUT s7, BLINKING_LED_port        ;display blinking LED

                    JUMP main_program
  		  
                    ;**************************************************************************************
                    ; Routines to display hexadecimal values 
                    ;**************************************************************************************
                    ;
                    ;
                    ; Convert hexadecimal value provided in register s0 into ASCII characters
                    ;
                    ; The value provided must can be any value in the range 00 to FF and will be converted into
                    ; two ASCII characters.
                    ;     The upper nibble will be represented by an ASCII character returned in register s3.
                    ;     The lower nibble will be represented by an ASCII character returned in register s2.
                    ;
                    ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                    ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                    ; hexadecimal requiring a further addition of 07 to the 30 already added.
                    ;
                    ; Registers used s0, s2 and s3.
                    ;
 hex_byte_to_ASCII: LOAD s2, s0                         ;remember value supplied
                    SR0 s0                              ;isolate upper nibble
                    SR0 s0
                    SR0 s0
                    SR0 s0
                    CALL hex_to_ASCII                   ;convert
                    LOAD s3, s0                         ;upper nibble value in s3
                    LOAD s0, s2                         ;restore complete value
                    AND s0, 0F                          ;isolate lower nibble
                    CALL hex_to_ASCII                   ;convert
                    LOAD s2, s0                         ;lower nibble value in s2
                    RETURN
                    ;
                    ; Convert hexadecimal value provided in register s0 into ASCII character
                    ;
                    ;Register used s0
                    ;
      hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
                    JUMP C, number_char
                    ADD s0, 07                          ;ASCII char A to F in range 41 to 46
       number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
                    RETURN
                   
                 
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
					
		delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
         wait_100ms: CALL delay_1ms
                     SUB s3, 01
                     JUMP NZ, wait_100ms
                     RETURN		
					 
				
					
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN

                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
               ISR: STORE s0, ISR_preserve_s0           ;preserve registers
                    STORE s1, ISR_preserve_s1           
                    STORE s2, ISR_preserve_s2          
                    STORE s3, ISR_preserve_s3           

                    INPUT s0, DATA_IN_PORT              ;get audio_data
                    CALL get_abs_value                  ;get abs value of audio data
                    FETCH s1, ACCUMULATOR_LSB           ;load accumulators
                    FETCH s2, ACCUMULATOR_MSB
                    FETCH s3, COUNTER                   ;get counter value
                    OUTPUT s1, SSEG_PORT1
                    OUTPUT s2, SSEG_PORT2
                    ADD s1, s0                          ;sum samples
                    ADDCY s2, 00                        ;add carry bit to ACCUMULATOR_MSB
                    ADD s3, 01                          ;increment counter
                    STORE s1, ACCUMULATOR_LSB           ;store accumulators
                    STORE s2, ACCUMULATOR_MSB
                    STORE s3, COUNTER                   ;store new counter value

                    

                    JUMP NZ, end_ISR                    ;end ISR if < 256 samples are summed up


                    ;display average value on LEDs once 256 samples are gathered
   display_average: CALL find_msb_position
                    TEST s0, FF                         ;check if s0 is 0, if so, display 0 on LEDs
                    JUMP Z, output_LEDs 
                    LOAD s1, 00                         ;used for turning on LEDs
                    LOAD s2, 00                         ;used for resetting accumulators

                    ;else s0 > 0
   light_LEDs_loop: SR1 s1                              ;shift 1 into MSB
                    SUB s0, 01                          ;decrement bit position
                    JUMP NC, light_LEDs_loop            ;loop until carry (s0 underflowed)

       output_LEDs: OUTPUT s1, LED_port                 ;display average on LEDs
                    STORE s2, ACCUMULATOR_LSB
                    STORE s2, ACCUMULATOR_MSB
                    JUMP end_ISR


                    ;assume audio_data in s0, return abs value of s0 in s0
     get_abs_value: TEST s0, 80                         ;0x80 = 1000_0000b, checking for signed bit
                    JUMP NC, return_abs_value           ;if carry bit, then sign bit present
                    ;get two's complement
                    XOR s0, FF                          ;invert by XOR'ing with 1111_1111
                    ADD s0, 01                          ;add 1
  return_abs_value: RETURN


                    ;returns msb position in s0
 find_msb_position: LOAD s0, 07                         ;start checking from bit 7
                    FETCH s1, ACCUMULATOR_MSB           ;after dividing accumulator by 256, only upper 8 bits remain, 
                                                        ;so use ACCUMULATOR_MSB for finding MSB
                    LOAD s2, 80                         ;binary: 1000 0000 (bit mask for bit 7)

     find_msb_loop: TEST s1, s2                         ;check if current bit is 1
                    JUMP NZ, found_msb                  ;if so, done
                    SR0 s2                              ;shift bit mask right (check next lower bit)
                    SUB s0, 01                          ;decrement bit position
                    JUMP NC, find_msb_loop              ;loop until carry (s0 underflowed)

                    ;if no bit found (input was 0)
                    LOAD s0, 00                         ;return 0x00 to indicate no MSB found

         found_msb: RETURN


           end_ISR: FETCH s3, ISR_preserve_s3           ;restore registers
                    FETCH s2, ISR_preserve_s2           
                    FETCH s1, ISR_preserve_s1           
                    FETCH s0, ISR_preserve_s0           
                    RETURNI ENABLE
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
